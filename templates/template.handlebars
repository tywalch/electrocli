{{#each instances}}
{{#eq type "entity"}}
export declare namespace {{name}} {
    namespace Where {
        {{#each attributes}}
        const {{name}}Symbol: unique symbol;

        {{/each}}
        {{#each attributes}}
        interface {{name}} {
            [{{name}}Symbol]: void;
        }

        {{/each}}
        type AttributeName = {{{union attributeNames}}}

        type AttributeType<T extends AttributeName> =
            {{#each attributes}}
            T extends {{name}} ? {{type}} :
            {{/each}}
            never;
        
        type Operations = {
            eq: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            gt: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            lt: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            gte: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            lte: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            between: <T extends AttributeName>(attr: T, value: AttributeType<T>, value2: AttributeType<T>) => string,
            begins: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            exists: <T extends AttributeName>(attr: T) => string,
            notExists: <T extends AttributeName>(attr: T) => string,
            contains: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            notContains: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            value: <T extends AttributeName>(attr: T, value: AttributeType<T>) => string,
            name: <T extends AttributeName>(attr: T) => string,
        };

        type Attributes = {
            {{#each attributes}}
            {{name}}: {{name}};
            {{/each}}
        }

        type Callback = (attr: Attributes, op: Operations) => string;
    }

    {{#each enums}}
    type {{name}} = {{{stringUnion values}}};

    {{/each}}
    type TableIndexNames = {{{stringUnion tableIndexFields}}};
    
    export type Item = {
    {{#each attributes}}
        {{name}}{{#if optional}}?{{/if}}: {{type}}
    {{/each}}
    }
    
    export type Attributes = {
    {{#each attributes}}
        {{name}}: {{type}}
    {{/each}}
    }
    
    export type RawItem = {
        {{#each keyNames}}
        {{this}}: string
        {{/each}}
        {{#each attributes}}
        {{name}}{{#if optional}}?{{/if}}: {{type}}
        {{/each}}
    }
    
    type config = {
        raw?: boolean,
        params?: Object,
        includeKeys?: boolean,
        originalErr?: boolean,
    }
    
    type NonReadOnlyProperties = {
        {{#each attributes}}
        {{#if readonly}}
        {{else}}
        {{name}}{{#if optional}}?{{/if}}: {{type}}
        {{/if}}
        {{/each}}
    }
    
    {{#each indexes}}
    type {{typeName}} = {{{ buildIndexType facets }}}

    {{#if index}}
    type {{typeName}}PK = {{{ buildIndexType (filterIndexType facets "pk") }}}

    type {{typeName}}SK = {{{ buildIndexType (filterIndexType facets "sk") }}}

    {{/if}}
    {{/each}}
    // Figure out better typing for value here
    type FilterOperations<T> = {
        gte: (value: T) => string
        gt: (value: T) => string
        lte: (value: T) => string
        lt: (value: T) => string
        eq: (value: T) => string
        begins: (value: T) => string
        exists: () => T
        notExists: () => T
        contains: (value: T) => string
        notContains: (value: T) => string
        between: (start: T, end: T) => string
        name: () => T
        value: (value: T) => string
    };
    
    type FilterAttributes<T extends Attributes> = {
        [K in keyof T]: FilterOperations<T[K]>
    }
    
    type GoRecord<T> = () => Promise<T>

    type PageRecord = (page?: {{tableIndexName}} | null) => Promise<[Item | null, Item[]]> 

    type ParamRecord = () => Object

    type FilterRecords = (filter: <T extends Attributes>(record: FilterAttributes<T>) => string) => RecordsActionOptions

    type WhereRecords = (where: Where.Callback) => RecordsActionOptions

    type RecordsActionOptions = {
        go: GoRecord<Item[]>
        params: ParamRecord
        page: PageRecord
        filter: FilterRecords
        where: WhereRecords
    }
    
    type SetRecordActionOptions = {
        go: GoRecord<Item[]>
        params: ParamRecord
        filter: FilterRecords
        page: PageRecord
        set: SetRecord
        where: WhereRecords
    }
    
    type SetRecord = (properties: Partial<NonReadOnlyProperties>) => SetRecordActionOptions
    
    type QueryOperations<T> = {
        between: (skFacetsStart: T, skFacetsEnd: T) => RecordsActionOptions
        gt: (skFacets: T) => RecordsActionOptions
        gte: (skFacets: T) => RecordsActionOptions
        lt: (skFacets: T) => RecordsActionOptions
        lte: (skFacets: T) => RecordsActionOptions
        go: GoRecord<Item[]>
        params: ParamRecord
        page: PageRecord
        filter: FilterRecords
        where: WhereRecords
    }
    
    class {{name}} {
        get: (key: {{tableIndexName}}) => {go: GoRecord<Item>};
        delete: (key: {{tableIndexName}}) => {go: GoRecord<Item>};
        update: (key: {{tableIndexName}}) => {set: SetRecord};
        patch: (key: {{tableIndexName}}) => {set: SetRecord};
        put: (record: Item) => {go: GoRecord<Item>};
        create: (record: Item) => {go: GoRecord<Item>};
        find: (record: Partial<Item>) => RecordsActionOptions;
        setIdentifier: (type: "model" | "table", value: string) => void
        query: {
            {{#each indexes}}
            {{#if index}}
            {{name}}: (key: {{typeName}}) => QueryOperations<{{typeName}}SK>
            {{else}}
            {{name}}: (key: {{typeName}}) => RecordsActionOptions,
            {{/if}}
            {{/each}}
        };
        {{#each staticProperties}}
        {{name}}: {{{value}}};
        {{/each}}
    }
}
{{/eq}}
{{#eq type "collection"}}
export declare namespace {{name}}Collection {
    namespace Where {
        {{#each attributes}}
        const {{name}}Symbol: unique symbol;

        {{/each}}
        {{#each attributes}}
        interface {{name}} {
            [{{name}}Symbol]: void;
        }

        {{/each}}
        type AttributesName = {{{union attributeNames}}}

        type AttributeType<T extends AttributesName> =
            {{#each attributes}}
            T extends {{name}} ? {{type}} :
            {{/each}}
            never;
        
        type Operations = {
            eq: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            gt: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            lt: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            gte: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            lte: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            between: <T extends AttributesName>(attr: T, value: AttributeType<T>, value2: AttributeType<T>) => string,
            begins: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            exists: <T extends AttributesName>(attr: T) => string,
            notExists: <T extends AttributesName>(attr: T) => string,
            contains: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            notContains: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            value: <T extends AttributesName>(attr: T, value: AttributeType<T>) => string,
            name: <T extends AttributesName>(attr: T) => string,
        };

        type Attributes = {
            {{#each attributes}}
            {{name}}: {{name}};
            {{/each}}
        }

        type Callback = (attr: Attributes, op: Operations) => string;
    }

    {{#each enums}}
    type {{name}} = {{{stringUnion values}}};

    {{/each}}
    type IndexFacets = {{{ buildIndexType facets }}}
    
    type Attributes = {
    {{#each attributes}}
        {{name}}{{#if optional}}?{{/if}}: {{type}}
    {{/each}}
    }
    
    {{#each item}}
    type {{@key}}Item = {
        {{#each this}}
        {{name}}{{#if optional}}?{{/if}}: {{type}}
        {{/each}}
    }
    
    {{/each}}
    export type Item = {
    {{#each item}}
        {{@key}}: {{@key}}Item[]
    {{/each}}
    }
    
    // Figure out better typing for value here
    type FilterOperations<T> = {
        gte: (value: T) => string
        gt: (value: T) => string
        lte: (value: T) => string
        lt: (value: T) => string
        eq: (value: T) => string
        begins: (value: T) => string
        exists: () => T
        notExists: () => T
        contains: (value: T) => string
        notContains: (value: T) => string
        between: (start: T, end: T) => string
        name: () => T
        value: (value: T) => string
    };
    
    type FilterAttributes<T extends Attributes> = {
        [K in keyof T]: FilterOperations<T[K]>
    }
    
    type GoRecord<T> = () => Promise<T>

    type PageRecord = (page?: Attributes | null) => Promise<[Attributes | null, Item[]]> 

    type ParamRecord = () => Object

    type FilterRecords = (filter: <T extends Attributes>(record: FilterAttributes<T>) => string) => RecordsActionOptions

    type WhereRecords = (where: Where.Callback) => RecordsActionOptions

    type RecordsActionOptions = {
        go: GoRecord<Item[]>
        params: ParamRecord
        page: PageRecord
        filter: FilterRecords
        where: WhereRecords
    }
    
    type {{name}} = (key: IndexFacets) => RecordsActionOptions
}
{{/eq}}

{{/each}}
{{#if isService}}
export declare class Instance {
    service: {
        name: string;
        table: string;
    };
    entities: {
        {{#each instances}}
        {{#eq type "entity"}}
        {{name}}: {{name}}.{{name}}, 
        {{/eq}}
        {{/each}}
    };
    collections: {
        {{#each instances}}
        {{#eq type "collection"}}
        {{name}}: {{name}}Collection.{{name}}
        {{/eq}}
        {{/each}}
    };
}

declare const _default: Instance;

{{else}}
export type Instance = {{export}}.{{export}}

declare const _default: Instance;

{{/if}}
{{#ne type "model"}}
export default _default;
{{/ne}}